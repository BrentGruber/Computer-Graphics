{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"da",
				"DarkKnight"
			],
			[
				"vic",
				"playVictory"
			],
			[
				"next",
				"next_lev"
			],
			[
				"nex",
				"next_lev"
			],
			[
				"upda",
				"update_title"
			],
			[
				"make",
				"make_enemies"
			],
			[
				"obj",
				"objArray"
			],
			[
				"take",
				"take_damage"
			],
			[
				"check",
				"Check_Collision"
			],
			[
				"che",
				"Check_Collision"
			],
			[
				"mov",
				"move_sword"
			],
			[
				"my",
				"mySword"
			],
			[
				"up",
				"update_mv"
			],
			[
				"move",
				"Move_Eye"
			],
			[
				"Move",
				"Move_Eye"
			],
			[
				"tex",
				"textures"
			],
			[
				"ntex",
				"ntexcoords"
			],
			[
				"GL_TE",
				"GL_TEXTURE_2D"
			],
			[
				"terra",
				"terrain_build"
			],
			[
				"myC",
				"myCube"
			],
			[
				"seq",
				"sequence"
			],
			[
				"add",
				"add_team"
			],
			[
				"get",
				"get_user"
			],
			[
				"ret",
				"returncoms"
			],
			[
				"conve",
				"convert_list"
			],
			[
				"sys",
				"system"
			],
			[
				"remo",
				"remove"
			],
			[
				"FIF",
				"FIFO_NAMES"
			],
			[
				"MAX",
				"MAX_FIFO"
			],
			[
				"read",
				"read_new_fifos"
			],
			[
				"MA",
				"MAX_BUF"
			],
			[
				"reque",
				"request_new_fifos"
			],
			[
				"COM",
				"COM_REQUEST_FIFOS"
			],
			[
				"MY",
				"MY_SERVER_OUT_FIFO"
			],
			[
				"str",
				"strerror"
			],
			[
				"COM_SU",
				"COM_SUCCESS_MORE_DATA"
			],
			[
				"COM_TIME",
				"COM_TIME_CONFLICT"
			],
			[
				"COM_EVE",
				"COM_EVENT_EXISTS"
			],
			[
				"conv",
				"convert_list"
			],
			[
				"sear",
				"search_events"
			],
			[
				"push",
				"push_back"
			],
			[
				"ca",
				"cal"
			],
			[
				"std",
				"stderr"
			],
			[
				"if",
				"ifile"
			],
			[
				"M",
				"MAX_BUF"
			],
			[
				"O",
				"O_WRONLY"
			],
			[
				"write",
				"write_to_file"
			],
			[
				"MY_",
				"MY_DATA_FILE"
			],
			[
				"MY_SER",
				"MY_SERVER_OUT_FIFO"
			],
			[
				"print",
				"print_com"
			],
			[
				"COM_",
				"COM_SUCCESS_MORE_DATA"
			],
			[
				"res",
				"response"
			],
			[
				"resp",
				"response"
			],
			[
				"it",
				"it"
			],
			[
				"star",
				"start_there"
			],
			[
				"conver",
				"convert_back"
			],
			[
				"size",
				"sizeof"
			],
			[
				"prin",
				"print_com"
			],
			[
				"com",
				"command"
			],
			[
				"event",
				"event_eq"
			],
			[
				"remove",
				"remove_event"
			],
			[
				"pri",
				"printf\tprintf â€¦"
			],
			[
				"new",
				"newEvent"
			],
			[
				"myE",
				"myEvent"
			],
			[
				"updat",
				"update_event"
			],
			[
				"remov",
				"remove_event"
			],
			[
				"writ",
				"write_fifo"
			],
			[
				"authentica",
				"authenticating"
			],
			[
				"re",
				"redirect"
			],
			[
				"fifo",
				"fifo_name"
			],
			[
				"fif",
				"fifo_name"
			],
			[
				"fi",
				"fifo_name"
			],
			[
				"spl",
				"split_string"
			],
			[
				"blade",
				"blade1"
			],
			[
				"trans",
				"transform"
			],
			[
				"num",
				"numrooms"
			],
			[
				"camer",
				"camera_view"
			],
			[
				"Ne",
				"nextRoom"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Final.cc",
			"settings":
			{
				"buffer_size": 31269,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/brent/Libraries/OS/Bounding/bounding_box.cc",
			"settings":
			{
				"buffer_size": 19038,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Final.sublime-project",
			"settings":
			{
				"buffer_size": 296,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Makefile",
			"settings":
			{
				"buffer_size": 2060,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "//******************************************************************* \n//                                                                    \n//  File:        Skybox                                           \n//                                                                     \n//  Author:      Brent Gruber\n//  Email:       bg240711@ohio.edu\n//                                                                    \n//\n//                                                                    \n//  Description: This is the implementation of a class that contains a Skybox object in 3d space                 \n//                                                                    \n//  Date:        12/4/2016\n//                                                                    \n//*******************************************************************\n\n\n#include \"skybox.h\"\n\n\nGLint  Skybox::NumPoints = 36;\nbool  \tSkybox::inited = false;\n\n// Vertices of a unit Skybox centered at origin, sides aligned with axes\npoint4 vert[8] = {\n  point4(-0.5, -0.5,  0.5, 1.0),\n  point4(-0.5,  0.5,  0.5, 1.0),\n  point4( 0.5,  0.5,  0.5, 1.0),\n  point4( 0.5, -0.5,  0.5, 1.0),\n  point4(-0.5, -0.5, -0.5, 1.0),\n  point4(-0.5,  0.5, -0.5, 1.0),\n  point4( 0.5,  0.5, -0.5, 1.0),\n  point4( 0.5, -0.5, -0.5, 1.0)\n};\n\n\n//******************************************************************\n//                                                                  \n//  Function:   init_points\n//                                                                  \n//  Purpose:    initialize points for Skybox                           \n//                                                                  \n//  Parameters: \n//                                                                  \n//\n// Pre Conditions: \n//\n// Post Conditions: points will be in VAO\n//                                                                  \n//******************************************************************\nvoid Skybox::init_points()\n{\n   if(!inited) {\n\tcolorSkybox();\n\tinited = true;\n   }\n}\n\n//******************************************************************\n//                                                                  \n//  Function:   MyQuad\n//                                                                  \n//  Purpose:    creates a face of Skybox                          \n//                                                                  \n//  Parameters: a, b, c, d - indices of 4 corners of face\n//                                                                  \n//\n// Pre Conditions: vertex array contains points;\n//\n// Post Conditions: Face is created\n//\n// Original Auth: David M. Chelberg\n//                                                                  \n//******************************************************************\nvoid Skybox::MyQuad(int a, int b, int c, int d)\n{\n  vec3 normal3 = cross(vert[b] - vert[a],\n      vert[c]  - vert[a]);\n  vec3 normal = vec3(normal3[0], normal3[1], normal3[2]);\n\n  //build face of cube\n\n   tex_coords[counter] = vec2(0.0, 1.0); \n   points[counter] = vert[a]; counter++;\n   tex_coords[counter] = vec2(0.0, 0.0); \n   points[counter] = vert[b]; counter++;\n   tex_coords[counter] = vec2(1.0, 0.0); \n   points[counter] = vert[c]; counter++;\n\n   normal3 = cross(vert[d] - vert[a],\n      vert[c] - vert[a]);\n   normal = vec3(normal3[0], normal3[1], normal3[2]);\n\n   tex_coords[counter] = vec2(0.0, 1.0); \n   points[counter] = vert[a]; counter++;\n   tex_coords[counter] = vec2(1.0, 0.0); \n   points[counter] = vert[c]; counter++;\n   tex_coords[counter] = vec2(1.0, 1.0); \n   points[counter] = vert[d]; counter++;\n}\n\n//******************************************************************\n//                                                                  \n//  Function:   colorSkybox\n//                                                                  \n//  Purpose:    creates a Skybox                         \n//                                                                  \n//  Parameters: \n//                                                                  \n//\n// Pre Conditions: \n//\n// Post Conditions: Skybox is created\n//\n// Original Auth: David M. Chelberg\n//                                                                  \n//******************************************************************\nvoid Skybox::colorSkybox()\n{\n  //build each face of Skybox\n  //back\n  MyQuad(1, 0, 3, 2);\n  //right\n  MyQuad(2, 3, 7, 6);\n  //bottom\n  MyQuad(3, 0, 4, 7);\n  //top\n  MyQuad(6, 5, 1, 2);\n  //front\n  MyQuad(5, 4, 7, 6);\n  //left\n  MyQuad(5, 4, 0, 1);\n}\n\n\n//******************************************************************\n//                                                                  \n//  Function:   Skybox\n//                                                                  \n//  Purpose:    constructor                       \n//                                                                  \n//  Parameters: \n//                                                                  \n//\n// Pre Conditions: \n//\n// Post Conditions: Skybox instance created\n//                                                                  \n//******************************************************************\nSkybox::Skybox()\n{\n  index=0;\n  counter = 0;\n  model_view = Scale(1.0, 1.0, 1.0);\n\n  init_points();\n}\n\n//******************************************************************\n//                                                                  \n//  Function:   Skybox\n//                                                                  \n//  Purpose:    constructor                       \n//                                                                  \n//  Parameters: inputs\n//                                                                  \n//\n// Pre Conditions: \n//\n// Post Conditions: Skybox instance created with given inputs\n//                                                                  \n//******************************************************************\nSkybox::Skybox(GLuint nindex, point4 *npoints, vec2 *ntexcoords, GLint nmvLoc)\n{\n  index = nindex;\n  counter = nindex;\n  points = npoints;\n  tex_coords = ntexcoords;\n  model_view = Scale(1.0, 1.0, 1.0);\n  mvLoc = nmvLoc;\n  texture = false;\n\n  init_points();\n}\n\n//******************************************************************\n//                                                                  \n//  Function:   Skybox\n//                                                                  \n//  Purpose:    constructor                       \n//                                                                  \n//  Parameters: inputs\n//                                                                  \n//\n// Pre Conditions: \n//\n// Post Conditions: Skybox instance created with given inputs\n//                                                                  \n//******************************************************************\nSkybox::Skybox(GLuint nindex, point4 *npoints, vec2 *ntexcoords, GLint nmvLoc, GLint ncolLoc, GLuint *ntextures)\n{\n  index = nindex;\n  counter = nindex;\n  points = npoints;\n  tex_coords = ntexcoords;\n  model_view = Scale(1.0, 1.0, 1.0);\n  clr = vec4(1.0, 1.0, 1.0, 1.0);\n  mvLoc = nmvLoc;\n  colLoc = ncolLoc;\n  textures = ntextures;\n\n  init_points();\n}\n\n//******************************************************************\n//                                                                  \n//  Function:   Skybox\n//                                                                  \n//  Purpose:    constructor                       \n//                                                                  \n//  Parameters: nSkybox - Skybox to copy from\n//                                                                  \n//\n// Pre Conditions: \n//\n// Post Conditions: Skybox instance created from another Skybox\n//                                                                  \n//******************************************************************\nSkybox::Skybox(Skybox *nSkybox)\n{\n  index = nSkybox->index;\n  counter = nSkybox->counter;\n  points = nSkybox->points;\n  model_view = nSkybox->model_view;\n  trans_vec = nSkybox->trans_vec;\n  rot_vec = nSkybox->rot_vec;\n  scl_vec = nSkybox->scl_vec;\n  mvLoc = nSkybox->mvLoc;\n  colLoc = nSkybox->colLoc;\n}\n\n//******************************************************************\n//                                                                  \n//  Function:   draw\n//                                                                  \n//  Purpose:    draw the Skybox                       \n//                                                                  \n//  Parameters: \n//                                                                  \n//\n// Pre Conditions: \n//\n// Post Conditions: Skybox is visible on screen\n//                                                                  \n//******************************************************************\nvoid Skybox::draw()\n{\n  int facePoints = 6;\n\n\t//send values and draw\n\tglUniform4f(colLoc, clr.x, clr.y, clr.z, clr.w);\n    glUniformMatrix4fv(mvLoc, 1, GL_TRUE, model_view);\n\n    //behind\n    glBindTexture(GL_TEXTURE_2D, textures[0]);\n\n    glDrawArrays(GL_TRIANGLES, index, facePoints);\n    index+=6;\n\n    //right\n    glBindTexture(GL_TEXTURE_2D, textures[4]);\n\n    glDrawArrays(GL_TRIANGLES, index, facePoints);\n    index+=6;\n\n    //below\n    glBindTexture(GL_TEXTURE_2D, textures[1]);\n\n    glDrawArrays(GL_TRIANGLES, index, facePoints);\n    index+=6;\n\n    //top\n    glBindTexture(GL_TEXTURE_2D, textures[5]);\n\n    glDrawArrays(GL_TRIANGLES, index, facePoints);\n    index+=6;\n\n    //front\n    glBindTexture(GL_TEXTURE_2D, textures[2]);\n\n    glDrawArrays(GL_TRIANGLES, index, facePoints);\n    index+=6;\n\n    //left\n    glBindTexture(GL_TEXTURE_2D, textures[3]);\n\n    glDrawArrays(GL_TRIANGLES, index, facePoints);\n    index=0;\n}\n\n//******************************************************************\n//                                                                  \n//  Function:   draw\n//                                                                  \n//  Purpose:    draw the Skybox                     \n//                                                                  \n//  Parameters: modview - external model view matrix to use\n//                                                                  \n//\n// Pre Conditions: \n//\n// Post Conditions: Skybox will be visible on screen, transformed by modview\n//                                                                  \n//******************************************************************\nvoid Skybox::draw(mat4 modview)\n{ \n    update_mv();\n    mat4 temp = model_view;\n    mat4 model_view = modview * temp;\n    glUniform4f(colLoc, clr.x, clr.y, clr.z, clr.w);\n    glUniformMatrix4fv(mvLoc, 1, GL_TRUE, model_view);\n    glDrawArrays(GL_TRIANGLES, index, NumPoints);\n}\n\n\n//******************************************************************\n//                                                                  \n//  Function:   trans\n//                                                                  \n//  Purpose:    translate the Skybox                      \n//                                                                  \n//  Parameters: new_vec - translation vector to move Skybox with\n//                                                                  \n//\n// Pre Conditions: \n//\n// Post Conditions: model_view matrix is updated with a translate vector\n//                                                                  \n//******************************************************************\nvoid Skybox::trans(vec3 new_vec)\n{\n\tmat4 temp, temp2;\n\ttrans_vec += new_vec;\n\ttemp = Translate(new_vec.x, new_vec.y, new_vec.z);\n\ttemp2 = model_view;\n\tmodel_view = temp * temp2;\n}\n\n//******************************************************************\n//                                                                  \n//  Function:   rot\n//                                                                  \n//  Purpose:    rotate the Skybox                    \n//                                                                  \n//  Parameters: new_vec - rotation vector to move Skybox with (in degrees)\n//                                                                  \n//\n// Pre Conditions: \n//\n// Post Conditions: Skybox is rotated by amounts given in vector\n//                                                                  \n//******************************************************************\nvoid Skybox::rot(vec3 new_vec)\n{\n\tmat4 temp, temp2;\n\ttemp = RotateZ(new_vec.z) * RotateY(new_vec.y) * RotateX(new_vec.x);\n\trot_vec += new_vec;\n\ttemp2 = model_view;\n\tmodel_view = temp * temp2; \n}\n\n//******************************************************************\n//                                                                  \n//  Function:   scl\n//                                                                  \n//  Purpose:    scale the Skybox                     \n//                                                                  \n//  Parameters: new_vec - new scale vector\n//                                                                  \n//\n// Pre Conditions: \n//\n// Post Conditions: Skybox is scaled by the vector\n//                                                                  \n//******************************************************************\nvoid Skybox::scl(vec3 new_vec)\n{\n\tscl_vec = new_vec;\n\tupdate_mv();\n}\n\n//******************************************************************\n//                                                                  \n//  Function:   update_mv\n//                                                                  \n//  Purpose:    update the model view matrix                   \n//                                                                  \n//  Parameters: \n//                                                                  \n//\n// Pre Conditions: \n//\n// Post Conditions: model_view matrix will contain all transformations\n//                                                                  \n//******************************************************************\nvoid Skybox::update_mv()\n{\n\tmodel_view = Translate(trans_vec) * (RotateX(rot_vec.x) * RotateY(rot_vec.y) * RotateZ(rot_vec.z)) * Scale(scl_vec);\n}\n\n//******************************************************************\n//                                                                  \n//  Function:   transform\n//                                                                  \n//  Purpose:    to transform the Skybox including a translation, a rotation, and a scale                      \n//                                                                  \n//  Parameters: t_vec - translatio vec\n//\t\t\t\tr_vec - rotation vec\n//\t\t\t\ts_vec - scale vec\n//                                                                  \n//\n// Pre Conditions: \n//\n// Post Conditions: Skybox is transformed\n//                                                                  \n//******************************************************************\nvoid Skybox::transform(vec3 t_vec, vec3 r_vec, vec3 s_vec)\n{\n\ttrans_vec += t_vec;\n\trot_vec += r_vec;\n\tscl_vec = s_vec;\n\tupdate_mv();\n}\n\n//******************************************************************\n//                                                                  \n//  Function:   Identity\n//                                                                  \n//  Purpose:    create identity matrix                       \n//                                                                  \n//  Parameters: \n//                                                                  \n//\n// Pre Conditions: \n//\n// Post Conditions: returns identity matrix\n//                                                                  \n//******************************************************************\nvoid Skybox::Identity()\n{\n\ttrans_vec = (0.0, 0.0, 0.0);\n\trot_vec = (0.0, 0.0, 0.0);\n\tscl_vec = (0.0, 0.0, 0.0);\n}\n\n\n\nvoid Skybox::set_pos(vec3 t_vec)\n{\n  trans_vec = t_vec;\n  update_mv();\n}\n\n//******************************************************************\n//                                                                  \n//  Function:   Check_Collision\n//                                                                  \n//  Purpose:    check if there is a collision with the Skybox                      \n//                                                                  \n//  Parameters: point - point to check collision with\n//\t\t\t\tmovement - movement vector of point\n//                                                                  \n//\n// Pre Conditions: \n//\n// Post Conditions: returns true if there was a collision\n//                                                                  \n//******************************************************************\nbool Skybox::Check_Collision(vec3 point, vec3 movement)\n{\n\t//get positions of faces of each wall\n\tGLfloat left = trans_vec.x - (scl_vec.x/2); //left side of Skybox\n\tGLfloat right = trans_vec.x + (scl_vec.x/2); //right side of Skybox\n\tGLfloat front = trans_vec.z + (scl_vec.z/2); //front of Skybox\n\tGLfloat back = trans_vec.z - (scl_vec.z/2); //back of Skyboxw\n\tGLfloat bottom = trans_vec.y - (scl_vec.y/2); //bottom of Skybox\n\tGLfloat top = trans_vec.y + (scl_vec.y/2); //top of Skybox\n\n\t//check if the point is within the x, y or z planes of the Skybox\n\tbool withinx = (point.x < right && point.x > left);\n\tbool withiny = (point.y < top && point.y > bottom);\n\tbool withinz = (point.z > back && point.z < front);\n\n\t//within the xy plane of Skybox and point crosses one of the z planes after movement\n\tif(withinx && withiny && ((point.z > front && (point.z + movement.z) < front) || (point.z < back && (point.z + movement.z) > back)))\n\t{\n\t\treturn true;\n\t}\n\n\t//within the yz plane of Skybox and point crosses one of the x planes after movement\n\tif(withiny && withinz && ((point.x < left && (point.x + movement.x) > left) || (point.x > right && (point.x + movement.x) < right)))\n\t{\n\t\treturn true;\n\t}\n\n\t//within the xz plane of Skybox and point crosses one of the y planes after movement\n\tif(withinx && withinz && ((point.y < bottom && (point.y + movement.y) > bottom) || (point.y > top && (point.y + movement.y) < top)))\n\t{\n\t\treturn true;\n\t}\n\n\n\treturn false;\n}\n\n//******************************************************************\n//                                                                  \n//  Function:   color\n//                                                                  \n//  Purpose:    change color                      \n//                                                                  \n//  Parameters: nr - amoutn of red\n//\t\t\t\tng - amount of green\n//\t\t\t\tnb - amount of blue\n//                                                                  \n//\n// Pre Conditions: \n//\n// Post Conditions: color vector is changed\n//                                                                  \n//******************************************************************\nvoid Skybox::color(GLfloat nr, GLfloat ng, GLfloat nb)\n{\n\tclr = vec4(nr, ng, nb, 1.0);\n}\n\n//******************************************************************\n//                                                                  \n//  Function:   get_translation\n//                                                                  \n//  Purpose:    return the translation vector                      \n//                                                                  \n//  Parameters: \n//                                                                  \n//\n// Pre Conditions: \n//\n// Post Conditions: returns the translation vector\n//                                                                  \n//******************************************************************\nvec3 Skybox::get_translation()\n{\n\treturn trans_vec;\n}\n\n//******************************************************************\n//                                                                  \n//  Function:   get_rotation\n//                                                                  \n//  Purpose:    return the rotation vector                      \n//                                                                  \n//  Parameters: \n//                                                                  \n//\n// Pre Conditions: \n//\n// Post Conditions: return the rotation vector\n//                                                                  \n//******************************************************************\nvec3 Skybox::get_rotation()\n{\n\treturn rot_vec;\n}\n\n//******************************************************************\n//                                                                  \n//  Function:   get_scale\n//                                                                  \n//  Purpose:    return the scale vector                      \n//                                                                  \n//  Parameters: \n//                                                                  \n//\n// Pre Conditions: \n//\n// Post Conditions: return the scale vector\n//                                                                  \n//******************************************************************\nvec3 Skybox::get_scale()\n{\n\treturn scl_vec;\n}\n\n//******************************************************************\n//                                                                  \n//  Function:   get_location\n//                                                                  \n//  Purpose:    return the location of the Skybox                      \n//                                                                  \n//  Parameters: \n//                                                                  \n//\n// Pre Conditions: \n//\n// Post Conditions: return the location vector\n//                                                                  \n//******************************************************************\nvec3 Skybox::get_location()\n{\n\treturn trans_vec;\n}",
			"file": "Skybox/skybox.cc",
			"file_size": 21938,
			"file_write_time": 131254733376234636,
			"settings":
			{
				"buffer_size": 21938,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Cube/cube.cc",
			"settings":
			{
				"buffer_size": 20970,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Characters/player.cc",
			"settings":
			{
				"buffer_size": 12674,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Characters/sword.cc",
			"settings":
			{
				"buffer_size": 6089,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "//******************************************************************* \n//                                                                    \n//  File:        Sword                                          \n//                                                                     \n//  Author:      Brent Gruber\n//  Email:       bg240711@ohio.edu\n//  Class:       CS 4250 - Final Project\n//                                                                    \n//\n//                                                                    \n//  Description: This class will provide the user player with a sword they can swing to damage enemies \n//\t\t\t\t Header file             \n//                                                                    \n//  Date:        12/6/2016\n//                                                                    \n//*******************************************************************\n\n#ifndef SWORD_H\n#define SWORD_H\n\n#include \"../Cube/cube.h\"\n\n//sword class built on cube class\nclass Sword: public Cube {\n\tpublic:\n\t\t//constructor\n\t\tSword();\n\n\t\t//better constructor\n\t\tSword(Cube *nCube, int nAttack);\n\n\t\t//set or clear flag for swing animation\n\t\tvoid swing();\n\n\t\t//draw the sword, animate if necessary\n\t\tvoid sdraw();\n\n\t\t//return the attack strength of the sword\n\t\tint get_attack();\n\n\tprivate:\n\t\t//perform animation of sword\n\t\tvoid move_sword();\n\n\t\tCube* myCube;\n\t\t//attack strength\n\t\tint attack;\n\t\t//angle for animation\n\t\tfloat angle;\n\t\tfloat speed;\n\t\t//flag to determine if sword was swung\n\t\tbool swng;\n\t\t//flag to determine if sword has reched bottom of swing\n\t\tbool down;\n};\n\n#endif",
			"file": "Characters/sword.h",
			"file_size": 1588,
			"file_write_time": 131255310244571146,
			"settings":
			{
				"buffer_size": 1607,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Camera/camera.cc",
			"settings":
			{
				"buffer_size": 13703,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Characters/player.h",
			"settings":
			{
				"buffer_size": 2488,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "8-gdb-show interpreter\n=thread-group-added,id=\"i1\"\n~\"GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.04) 7.11.1\\n\"\n~\"Copyright (C) 2016 Free Software Foundation, Inc.\\n\"\n~\"License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.  Type \\\"show copying\\\"\\nand \\\"show warranty\\\" for details.\\n\"\n~\"This GDB was configured as \\\"x86_64-linux-gnu\\\".\\nType \\\"show configuration\\\" for configuration details.\"\n~\"\\nFor bug reporting instructions, please see:\\n\"\n~\"<http://www.gnu.org/software/gdb/bugs/>.\\n\"\n~\"Find the GDB manual and other documentation resources online at:\\n<http://www.gnu.org/software/gdb/documentation/>.\\n\"\n~\"For help, type \\\"help\\\".\\n\"\n~\"Type \\\"apropos word\\\" to search for commands related to \\\"word\\\"...\\n\"\n&\"./house: No such file or directory.\\n\"\n(gdb)\n8^error,msg=\"Undefined show command: \\\"interpreter\\\".  Try \\\"help show\\\".\"\n(gdb)\n9-inferior-tty-set /tmp/tmp255nq4\n9^done\n(gdb)\n10-enable-pretty-printing\n11-gdb-set target-async 1\n10^done\n(gdb)\n12-gdb-set pagination off\n11^done\n(gdb)\n12^done\n(gdb)\n13-gdb-set disassembly-flavor intel\n13^done\n(gdb)\n14-exec-run\n14^error,msg=\"No executable file specified.\\nUse the \\\"file\\\" or \\\"exec-file\\\" command.\"\n(gdb)\n",
			"settings":
			{
				"buffer_size": 1303,
				"line_ending": "Unix",
				"name": "GDB Session",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"contents": "GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.04) 7.11.1\nCopyright (C) 2016 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n<http://www.gnu.org/software/gdb/bugs/>.\nFind the GDB manual and other documentation resources online at:\n<http://www.gnu.org/software/gdb/documentation/>.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\"...\n",
			"settings":
			{
				"buffer_size": 736,
				"line_ending": "Unix",
				"name": "GDB Console",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix",
				"name": "GDB Variables",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"contents": "Skybox::MyQuad(this = 0xb61180,a = 1,b = 0,c = 3,d = 2,);\nSkybox::colorSkybox(this = 0xb61180,);\nSkybox::init_points(this = 0xb61180,);\nSkybox::Skybox(this = 0xb61180,nindex = 0,npoints = 0x6135a0 <points>,nnormals = 0x6137e0 <normals>,nmvLoc = 1,ncolLoc = 0,ntextures = 0x613be0 <textures>,);\ninit();\nmain(argc = 1,argv = 0x7fffffffe4f8,);\n",
			"settings":
			{
				"buffer_size": 341,
				"line_ending": "Unix",
				"name": "GDB Callstack",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix",
				"name": "GDB Callstack",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"contents": "001 -    stopped - Skybox::MyQuad(this = 0xb61180, a = 1, b = 0, c = 3, d = 2);\n",
			"settings":
			{
				"buffer_size": 80,
				"line_ending": "Unix",
				"name": "GDB Threads",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"contents": "1 - /home/brent/Github/Computer_Graphics/Final/Skybox/skybox.cc:78\n",
			"settings":
			{
				"buffer_size": 67,
				"line_ending": "Unix",
				"name": "GDB Breakpoints",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix",
				"name": "GDB Threads",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix",
				"name": "GDB Breakpoints",
				"read_only": true,
				"scratch": true
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 492.0,
		"last_filter": "sublimeGDB",
		"selected_items":
		[
			[
				"sublimeGDB",
				"SublimeGDB: Open Breakpoint View"
			],
			[
				"default ",
				"Preferences: SublimeGDB Settings â€“ Default"
			],
			[
				"Install",
				"Package Control: Install Package"
			]
		],
		"width": 734.0
	},
	"console":
	{
		"height": 188.0,
		"history":
		[
			"Install",
			"import urllib2,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation') ",
			"Install",
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) ",
			"Install"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/brent/Github/Computer_Graphics/Final",
		"/home/brent/Github/Computer_Graphics/Final/Bitmap",
		"/home/brent/Github/Computer_Graphics/Final/Camera",
		"/home/brent/Github/Computer_Graphics/Final/Characters",
		"/home/brent/Github/Computer_Graphics/Final/Cube",
		"/home/brent/Github/Computer_Graphics/Final/Room",
		"/home/brent/Github/Computer_Graphics/Final/Skybox"
	],
	"file_history":
	[
		"/home/brent/Github/Computer_Graphics/Final/textures/skycube_tga/horizon.bmp",
		"/home/brent/Github/Computer_Graphics/Final/textures/skycube_tga/moondust_bk.bmp",
		"/home/brent/Github/Computer_Graphics/Final/Final.sublime-project",
		"/home/brent/Libraries/OS/Bounding/bounding_box.cc",
		"/home/brent/Libraries/R_HW/HW3/cfit.R",
		"/home/brent/Libraries/R_HW/HW2/PCA/PCA.R",
		"/home/brent/Libraries/R_HW/HW2/HW/bar.R",
		"/home/brent/Libraries/New repo/2/OhioUniversityWXCPerformanceProgram/views/workoutentry.pug",
		"/home/brent/Libraries/New repo/2/OhioUniversityWXCPerformanceProgram/routes/index.js",
		"/home/brent/Libraries/New repo/2/OhioUniversityWXCPerformanceProgram/views/admin_data_dump_a.pug",
		"/home/brent/Libraries/New repo/2/OhioUniversityWXCPerformanceProgram/views/admin_data_dump_b.pug",
		"/home/brent/Libraries/New repo/2/OhioUniversityWXCPerformanceProgram/routes/queries.js",
		"/home/brent/Libraries/New repo/2/OhioUniversityWXCPerformanceProgram/views/admin_add_user.pug",
		"/home/brent/Github/Computer_Graphics/Final/Skybox/skybox.h",
		"/home/brent/Github/Computer_Graphics/Final/Skybox/skybox.cc",
		"/home/brent/Github/Computer_Graphics/Final/Characters/player.cc",
		"/home/brent/Github/Computer_Graphics/Final/house.cc",
		"/home/brent/Github/Computer_Graphics/Final/Characters/sword.h",
		"/home/brent/Github/Computer_Graphics/Final/Characters/sword.cc",
		"/home/brent/Github/Computer_Graphics/Final/Camera/camera.cc",
		"/home/brent/Github/Computer_Graphics/Final/Camera/camera.h",
		"/home/brent/Graphics/Computer_Graphics/Final/Bitmap/bitmap.cc",
		"/home/brent/Github/Computer_Graphics/Final/shaders/vshader72.glsl",
		"/home/brent/Github/Computer_Graphics/Final/shaders/fshader72.glsl",
		"/home/brent/Github/Computer_Graphics/Final/examples/texture3.cc",
		"/home/brent/Github/Computer_Graphics/Final/Makefile",
		"/home/brent/Github/Computer_Graphics/Final/Room/room.h",
		"/home/brent/Github/Computer_Graphics/Final/Characters/player.h",
		"/home/brent/Github/Computer_Graphics/Final/Room/room.cc",
		"/home/brent/Github/Computer_Graphics/Final/Cube/cube.h",
		"/home/brent/Github/Computer_Graphics/Final/Cube/cube.cc",
		"/build/glibc-GKVZIf/glibc-2.23/sysdeps/unix/sysv/linux/raise.c",
		"/home/brent/Graphics/Computer_Graphics/Final/house.cc",
		"/home/brent/Graphics/Computer_Graphics/Final/cube.h",
		"/home/brent/Graphics/Computer_Graphics/Final/cube.cc",
		"/home/brent/Graphics/Computer_Graphics/Final/camera.h",
		"/home/brent/Graphics/Computer_Graphics/Final/camera.cc",
		"/home/brent/Graphics/Computer_Graphics/Final/fshader72.glsl",
		"/home/brent/Graphics/Computer_Graphics/Final/vshader41.glsl",
		"/home/brent/Graphics/Computer_Graphics/Final/vshader72.glsl",
		"/home/brent/.config/sublime-text-3/Packages/User/SublimeGDB.sublime-settings",
		"/home/brent/.config/sublime-text-3/Packages/SublimeGDB/SublimeGDB.sublime-settings",
		"/home/brent/Libraries/New repo/2/OhioUniversityWXCPerformanceProgram/views/myworkouts.pug",
		"/home/brent/Libraries/R_HW/temp.R",
		"/home/brent/Libraries/R_HW/HW2/example/TC.R",
		"/home/brent/Desktop/database/insert.pl",
		"/home/brent/Libraries/R_HW/graph.R",
		"/home/brent/Desktop/database/get_gene_biomart.pl",
		"/home/brent/Libraries/R_HW/HW1/temp.R",
		"/home/brent/Libraries/R_HW/HW2/bar.R",
		"/home/brent/Desktop/node.js_pract/practice_proj/queries.js",
		"/home/brent/Desktop/testing_fork/Concurrent/server.cc",
		"/run/user/1000/gvfs/sftp:host=p2.cs.ohiou.edu,user=bgruber/home/bgruber/senior/OS/Prog1_fin/Iterative/IterServer.cc",
		"/run/user/1000/gvfs/sftp:host=p2.cs.ohiou.edu,user=bgruber/home/bgruber/senior/OS/Prog1_fin/Concurrent_test/calendar.cc",
		"/run/user/1000/gvfs/sftp:host=p2.cs.ohiou.edu,user=bgruber/home/bgruber/senior/OS/Prog1_fin/cs4420_project1/ConcTests.sh",
		"/run/user/1000/gvfs/sftp:host=p2.cs.ohiou.edu,user=bgruber/home/bgruber/senior/OS/Prog1_fin/test/ConcTests.sh",
		"/run/user/1000/gvfs/sftp:host=p2.cs.ohiou.edu,user=bgruber/home/bgruber/senior/OS/Prog1_fin/test/IterTests.sh",
		"/run/user/1000/gvfs/sftp:host=p2.cs.ohiou.edu,user=bgruber/home/bgruber/senior/OS/Prog1_fin/cs4420_project1/IterTests.sh",
		"/home/brent/Desktop/testing_fork/Concurrent/calendar.cc",
		"/run/user/1000/gvfs/sftp:host=p2.cs.ohiou.edu,user=bgruber/home/bgruber/senior/OS/Prog1_fin/Concurrent_test/calendar.h",
		"/home/brent/Desktop/testing_fork/client.c",
		"/home/brent/Desktop/testing_fork/server.cc",
		"/home/brent/Desktop/OS/My Homework/try2/iterative/server.cc",
		"/home/brent/Desktop/OS/My Homework/try2/iterative/client.c",
		"/home/brent/Desktop/OS/My Homework/try2/concurrent/server.cc",
		"/home/brent/Desktop/OS/My Homework/try2/concurrent/client.c",
		"/home/brent/Desktop/OS/My Homework/try2/server.cc",
		"/home/brent/Desktop/OS/My Homework/try2/client.c",
		"/home/brent/Desktop/OS/My Homework/Event.h",
		"/home/brent/Desktop/OS/My Homework/server.c",
		"/home/brent/Desktop/OS/My Homework/client.c",
		"/home/brent/Desktop/node.js_pract/queries.js",
		"/home/brent/Desktop/node.js_pract/server.js",
		"/home/brent/Libraries/New repo/OhioUniversityWXCPerformanceProgram/server.js",
		"/home/brent/Graphics/Computer_Graphics/working/camera.cc",
		"/home/brent/Graphics/Computer_Graphics/working/cube.cc",
		"/home/brent/Graphics/Computer_Graphics/working/room.cc",
		"/home/brent/Graphics/Computer_Graphics/working/room.h",
		"/home/brent/Graphics/Computer_Graphics/working/cube.h",
		"/home/brent/Graphics/Computer_Graphics/working/camera.h",
		"/home/brent/Graphics/Computer_Graphics/working/house.cc",
		"/home/brent/Graphics/Computer_Graphics/HW3/functions.h",
		"/home/brent/Graphics/Computer_Graphics/HW3/functions.cc",
		"/home/brent/Desktop/graphics/HW1/Football.cc",
		"/home/brent/Libraries/OhioUniversityWXCPerformanceProgram/site.htm"
	],
	"find":
	{
		"height": 63.0
	},
	"find_in_files":
	{
		"height": 102.0,
		"where_history":
		[
			"/home/brent/Github/Computer_Graphics/Final/textures/skycube_tga"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"skybox",
			"NEXT_LEVEL",
			"skybox",
			"skybox)",
			"make_enemies",
			"skybox",
			"2d",
			"move_enemies",
			"skyBox",
			"MyPlayer",
			"blue",
			"fadeaway",
			"texture",
			"move_enemie",
			"camera(",
			"move_eye",
			"camera",
			"move_en",
			"move_enem",
			"move(",
			"make_en",
			"make_",
			"make",
			"move_en",
			"move_enem",
			"cou",
			"attack(",
			"make_en",
			"attack(",
			"cout",
			"degreesto",
			"DegreesToRadians",
			"move(",
			"move",
			"speed",
			"cout",
			"rotation",
			"cout",
			"make_e",
			"enemies",
			"make_enemies",
			"attack()",
			"take_dam",
			"ghosts",
			"make",
			"ghosts",
			"create_ghosts",
			"health",
			"delete",
			"post",
			"dump(",
			"/getdatadumpind",
			"admin_add_user",
			"rot",
			"move_at",
			"Player",
			"ghosts.eras",
			"make",
			"keyb",
			"ghosts[",
			"numghosts",
			"move_ghosts",
			"numghosts",
			"display",
			"myCamera",
			"take_dam",
			"new Play",
			"take_d",
			"take",
			"make_ghosts",
			"ghosts",
			"move(",
			"make_g",
			"rooms",
			"create_room",
			"speed",
			"get_rot",
			"myPlayer",
			"sword",
			"rot",
			"change",
			"color(",
			"make_ghos",
			"display()",
			"thirdp",
			"mouse",
			"display",
			"room",
			"init()",
			"create_p",
			"move_eye",
			"myCamera",
			"transform",
			"myquad",
			"transform",
			"update_mv",
			"create_player",
			"skybox",
			"transform",
			"myCamera",
			"create_pl",
			"myPlayer",
			"cout",
			"move(",
			"myPlayer",
			"skybox",
			"zfar",
			"skybox",
			"TOT_TE",
			"znear",
			"skybox",
			"set_textures",
			"skybox",
			"display()",
			"move_ghosts",
			"move(",
			"draw",
			"tex_coords",
			"buffer",
			"display()",
			"move(",
			"draw",
			"tex_coords",
			"vtexcoord",
			"tex_coord",
			"tex",
			"glbind",
			"tex_coords"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"moondust",
			"enemies",
			"tex_coords",
			"ConcClient",
			"IterClient",
			"ConcClient",
			"IterClient",
			"cal"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Final.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31269,
						"regions":
						{
						},
						"selection":
						[
							[
								8274,
								8274
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8655.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/brent/Libraries/OS/Bounding/bounding_box.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19038,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Final.sublime-project",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 296,
						"regions":
						{
						},
						"selection":
						[
							[
								126,
								126
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2060,
						"regions":
						{
						},
						"selection":
						[
							[
								2041,
								2041
							]
						],
						"settings":
						{
							"syntax": "Packages/Makefile/Makefile.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1898.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "Skybox/skybox.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21938,
						"regions":
						{
						},
						"selection":
						[
							[
								19060,
								19060
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 20358.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "Cube/cube.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20970,
						"regions":
						{
						},
						"selection":
						[
							[
								10767,
								10767
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11389.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "Characters/player.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12674,
						"regions":
						{
						},
						"selection":
						[
							[
								12470,
								12470
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 12203.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "Characters/sword.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6089,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "Characters/sword.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1607,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "Camera/camera.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13703,
						"regions":
						{
						},
						"selection":
						[
							[
								1542,
								1542
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "Characters/player.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2488,
						"regions":
						{
						},
						"selection":
						[
							[
								2466,
								2466
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				}
			]
		},
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 11,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1303,
						"regions":
						{
						},
						"selection":
						[
							[
								1303,
								1303
							]
						],
						"settings":
						{
							"syntax": "Packages/SublimeGDB/gdb_session.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 12,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 736,
						"regions":
						{
						},
						"selection":
						[
							[
								736,
								736
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 301.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 13,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		},
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 14,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 341,
						"regions":
						{
						},
						"selection":
						[
							[
								241,
								241
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 15,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		},
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 16,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 80,
						"regions":
						{
						},
						"selection":
						[
							[
								80,
								80
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 17,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 67,
						"regions":
						{
						},
						"selection":
						[
							[
								67,
								67
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"word_wrap": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 18,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 19,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"word_wrap": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				3,
				1
			],
			[
				0,
				1,
				1,
				2
			],
			[
				1,
				1,
				2,
				2
			],
			[
				2,
				1,
				3,
				2
			]
		],
		"cols":
		[
			0.0,
			0.33,
			0.66,
			1.0
		],
		"rows":
		[
			0.0,
			0.75,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "Final.sublime-project",
	"replace":
	{
		"height": 118.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 734.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 734.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 427.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
